<script type="text/javascript">

    var client;
    var request;

    function useMic() {
        return true;
    }

    function getMode() {
        return Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionMode.shortPhrase;
    }

    function getKey() {
        return "20b78ad78eae48bd827cb076730f9a43";
    }

    function getLanguage() {
        return "en-us";
    }

    function clearText() {
        document.getElementById("mic-output").value = "";
    }

    function setText(text) {
        setTimeout(() => {
            console.log(text);
            $(".mic-loader").css({"display": "none"});
            if (text.entities && text.entities.length > 0) {
                $('#mic-output').text(text.query + " | Entity: " + text.entities[0].entity);
                setTimeout(() => {
                    window.filterPictures(text.entities[0].entity)
                    $('.mic-modal-close').click();
                    $('#mic-output').text("");
                }, 1000)
            } else {
                $('#mic-output').text("Uh Oh! Something went wrong.");
                setTimeout(() => {
                    $('.mic-modal-close').click();
                    $('#mic-output').text("");
                }, 2000)
            }
        }, 1000);
    }

    function getLuisConfig() {
        var appid = "063c5a5a-63da-4e46-acdf-4a00ac3977f0"
        var subid = "2bc13320877b449da37c3cf21df1ecb9";
        if (appid.length > 0 && subid.length > 0) {
            return { appid: appid, subid: subid };
        }
        return null;
    }

    function start() {

        var mode = getMode();
        var luisCfg = getLuisConfig();
        clearText();

        if (useMic()) {
            if (luisCfg) {
                client = Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionServiceFactory.createMicrophoneClientWithIntent(
                    getLanguage(),
                    getKey(),
                    luisCfg.appid,
                    luisCfg.subid);
            } else {
                client = Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionServiceFactory.createMicrophoneClient(
                    mode,
                    getLanguage(),
                    getKey());
            }
            client.startMicAndRecognition();
            setTimeout(function () {
                client.endMicAndRecognition();
                $('.mic-loader').css({"display": "block"});
                setTimeout(() => {
                    if ($('.mic-loader').css('display') !== "none") {
                        $(".mic-loader").css({"display": "none"});
                        $('#mic-output').text("Uh Oh! Something went wrong.");
                        setTimeout(() => {
                            $('.mic-modal-close').click();
                            $('#mic-output').text("");
                        }, 2000)
                    }

                }, 8000)
            }, 4000);

        } else {

            if (luisCfg) {
                client = Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionServiceFactory.createDataClientWithIntent(
                    getLanguage(),
                    getKey(),
                    luisCfg.appid,
                    luisCfg.subid);
            } else {
                client = Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionServiceFactory.createDataClient(
                    mode,
                    getLanguage(),
                    getKey());
            }
            request = new XMLHttpRequest();
            request.open(
                'GET',
                (mode == Microsoft.CognitiveServices.SpeechRecognition.SpeechRecognitionMode.shortPhrase) ? "whatstheweatherlike.wav" : "batman.wav",
                true);
            request.responseType = 'arraybuffer';
            request.onload = function () {
                if (request.status !== 200) {
                    setText("unable to receive audio file");
                } else {
                    client.sendAudio(request.response, request.response.length);
                }
            };
            request.send();

        }


        client.onFinalResponseReceived = function (response) {
            //setText(JSON.stringify(response));
        }

        client.onIntentReceived = function (response) {
            setText(JSON.parse(response));
        };
    }
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/2.5.0/fuse.min.js" type="text/javascript"></script>
<div id="app" class="hide"></div>

<style>
h2 {
  font-family: verdana;
  color: white;
}

.vcenter {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

html, body {
  height: 100%;
  width: 100%;
  background-color: #141e2a;
}

.splash {
    height: 100%;
    width: 100%;
    background-color: #141e2a;
    z-index: 60000;
}

.splash-title {
    position: absolute;
    top: 35%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.splash-loader {
    position: absolute;
    top: 55%;
    left: 50%;
    transform: translate(-50%, -50%);
}

</style>

<div class="animated splash container vcenter">
  <div class="row splash-title">
    <div class="col s12 center">
      <h2>Relive</h2>
    </div>
  </div>
  <div class="row splash-loader">
    <div class="col s12 center">
        <div class="atom large">
          <div class="electron"></div>
          <div class="electron"></div>
          <div class="electron"></div>
          <div class="electron"></div>
        </div>
    </div>
  </div>
</div>
